package com.helpme3;

import java.awt.dnd.DnDConstants;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.util.DBConnectionMgr_helpme;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleTypes;

public class DaoServer {
	DBConnectionMgr_helpme dbMgr = null;
	Connection con = null;
	CallableStatement cstmt = null;// query
	PreparedStatement pstmt = null;// procedure
	OracleCallableStatement ocstmt = null;// refcursor
	ResultSet rs = null;
	
	public VOMem login(VOMem pVO) {
		VOMem rVO = null;
		String mem_id = pVO.getMem_id();
		String mem_pw = pVO.getMem_pw();
		try {
			con = dbMgr.getConnection();
			cstmt = con.prepareCall("{call proc_chatlogin(?,?,?)}");
			cstmt.setString(1, mem_id);
			cstmt.setString(2, mem_pw);
			// out 파라미터 메소드
			cstmt.registerOutParameter(3, OracleTypes.CURSOR);
			// 실행 요청 메소드 호출
			cstmt.execute();
			ocstmt = (OracleCallableStatement) cstmt;
			rs = ocstmt.getCursor(3);
			while (rs.next()) {
				rVO = new VOMem();
				rVO.setMem_id(rs.getString("mem_id"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbMgr.freeConnection(con, cstmt, rs, ocstmt);
		}
		return rVO;
	}
	//개인톡 더블클릭 시 
	public VOChatList getRoomCreate(VOChatList pVO) {
		System.out.println("Dao getRoomCreate");
		String mem_id = pVO.getMem_id();
		String your_id = pVO.getClist_yourid();
		VOChatList rVO = null;
		try {
			con = dbMgr.getConnection();
			cstmt = con.prepareCall("{call proc_newroom(?,?,?)}");
			cstmt.setString(1, mem_id);
			cstmt.setString(2, your_id);
			cstmt.registerOutParameter(3, OracleTypes.CURSOR);
			cstmt.execute();
			ocstmt = (OracleCallableStatement) cstmt;
			rs = ocstmt.getCursor(3);
			while(rs.next()) {
				rVO = new VOChatList();
				rVO.setClist_code(rs.getString("clist_code"));
				rVO.setClist_yourid(rs.getString("clist_yourid"));
				rVO.setClist_count(rs.getString("clist_code"));
				rVO.setClist_name(rs.getString("clist_name"));
				rVO.setClist_gubun(rs.getString("clist_gubun"));
				rVO.setClist_img(rs.getString("clist_img"));
				rVO.setMem_id(rs.getString("mem_id"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbMgr.freeConnection(con, cstmt, rs, ocstmt);
		}
		return rVO;
	}
	//* VOCList에 담는것
	public List<VOChatList> getcList() {
		dbMgr = DBConnectionMgr_helpme.getInstance();
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT clist_code, clist_yourid, clist_count, clist_name, ");
		sql.append("        clist_gubun, clist_img, mem_id                     ");
		sql.append("   FROM chatlist                                           ");
		List<VOChatList> rList = new Vector<VOChatList>();
		VOChatList rVO = null;
		try {
			con = dbMgr.getConnection();
			pstmt = con.prepareStatement(sql.toString());
			rs = pstmt.executeQuery();
			while(rs.next()) {
				rVO = new VOChatList();
				rVO.setClist_code(rs.getString("clist_code"));
				rVO.setClist_yourid(rs.getString("clist_yourid"));
				rVO.setClist_count(rs.getString("clist_count"));
				rVO.setClist_name(rs.getString("clist_name"));
				rVO.setClist_gubun(rs.getString("clist_gubun"));
				rVO.setClist_img(rs.getString("clist_img"));
				rVO.setMem_id(rs.getString("mem_id"));
				rList.add(rVO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbMgr.freeConnection(con, pstmt, rs);
		}
		return rList;
	}
	//* 서버가 닫힐 때 리스트와 로그 싹 다 날리기
	public void serverClosing() {
		try {
			System.out.println("serverClosing");
			con = dbMgr.getConnection();
			cstmt = con.prepareCall("{call proc_serverexit()}");
			int result = cstmt.executeUpdate();
			System.out.println(result);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbMgr.freeConnection(con, cstmt);
		}
	}
	//MESSAGE
	public Map<String, Object> insMsg(Map<String, Object> pMap) {
		Map<String, Object> rMap = null;
		try {
			con = dbMgr.getConnection();
			cstmt = con.prepareCall("{call proc_loginsert(?,?,?,?,?,?,?)}");
			int i = 0;
			cstmt.setString(++i, pMap.get("writer").toString());
			cstmt.setString(++i, pMap.get("content").toString());
			cstmt.setString(++i, pMap.get("date").toString());
			cstmt.setString(++i, pMap.get("time").toString());
			cstmt.setString(++i, pMap.get("clist_code").toString());
			cstmt.setString(++i, pMap.get("imogi").toString());
			cstmt.registerOutParameter(++i, OracleTypes.CURSOR);
			cstmt.execute();
			ocstmt = (OracleCallableStatement) cstmt;
			rs = ocstmt.getCursor(7);
			while(rs.next()) {
				rMap = new LinkedHashMap<String, Object>();
				rMap.put("mem_img", rs.getString("mem_img"));
				rMap.put("mem_nick", rs.getString("mem_nick"));
				rMap.put("clog_writer", rs.getString("clog_writer"));
				rMap.put("clog_time", rs.getString("clog_time"));
				rMap.put("clist_code", rs.getString("clist_code"));
				rMap.put("clog_contents", rs.getString("clog_contents"));
				rMap.put("clog_imo", rs.getString("clog_imo"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbMgr.freeConnection(con, cstmt, rs, ocstmt);
		}
		return rMap;
	}
	//* 아이디 중복
	public String overLap(String mem_id) {
		String temp = null;
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT NVL((SELECT mem_id FROM mem WHERE mem_id = '?'), '중복') mem_id FROM dual ");
		try {
			con = dbMgr.getConnection();
			pstmt = con.prepareStatement(sql.toString());
			pstmt.setString(1, mem_id);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return temp;
	}

}
