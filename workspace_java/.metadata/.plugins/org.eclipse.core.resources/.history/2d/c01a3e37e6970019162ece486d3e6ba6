package com.network1;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
//클라이언트 측에서는 Runnable하지 않았다. - 단일스레드이다.
//why? - 경합,선택에 따른 지속적인 서비스

public class TalkClient extends JFrame implements ActionListener{
	///// 전역 변수 선언 부 /////
	JPanel jp_center = new JPanel();
	JTextArea jta_display = new JTextArea();
	JScrollPane jsp_display = new JScrollPane(jta_display
			,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED
			,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);//수평스크롤X, 수직스크롤O
	JTextField jtf_msg = new JTextField();

	JPanel jp_east = new JPanel();
	String cols[] = { "닉네임" };
	String data[][] = new String[0][1];
	DefaultTableModel dtm_name = new DefaultTableModel(data, cols); //json
	JTable jtb_name = new JTable(dtm_name); //datagrid
	JScrollPane jsp_name = new JScrollPane(jtb_name
			,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED
			,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
	
	JPanel jp_east_south = new JPanel();
	JButton jbtn_whisper = new JButton("일대일 채팅");
	JButton jbtn_change = new JButton("대화명 변경");
	JButton jbtn_exit = new JButton("종료");
	JButton jbtn_blank = new JButton("");
	
	String nickName = null;
	String ip = "192.168.0.211";
	int port = 3001;
	//소켓 선언 - (서버 접속 시도 - 객체를 손에 쥐면 oos와 ois생성)
	Socket mySocket = null;
	//말하기 - actionPerformed - 내 안에서 처리하기
	ObjectOutputStream oos = null;
	//듣기 - run() 처리 - 다른 클래스(Thread)에서 처리하기
	ObjectInputStream ois = null;
	 
	
	///*** 생성자 ***///
	public TalkClient() {
		nickName = JOptionPane.showInputDialog("대화명을 입력하세요.");
		initDisplay();
		try {
			//클래스 사이에는 의존관계 존재 - Socket생성 먼저 그 소켓을 사용하여 oos를 생성함.
			mySocket = new Socket(ip, port);
			oos = new ObjectOutputStream(mySocket.getOutputStream());
			ois = new ObjectInputStream(mySocket.getInputStream());
			//서버에 내가 로그인 했음을 알림 - 말하기
			oos.writeObject(Protocol.ROOM_IN
					+Protocol.seperator+nickName);
			TalkClientThread tct = new TalkClientThread(this);
			tct.start();//run메소드 호출 - 콜백함수
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//** 화면 구성부 **//
	public void initDisplay() {
		//이벤트 처리
		jtf_msg.addActionListener(this);
		//레이아웃 설정
		jp_center.setLayout(new BorderLayout());
		jp_east.setLayout(new BorderLayout());
		jp_east_south.setLayout(new GridLayout(2,2));
		this.setLayout(new BorderLayout());
		//컴포넌트 붙혀주기
		jp_east_south.add(jbtn_blank);
		jp_east_south.add(jbtn_whisper);
		jp_east_south.add(jbtn_change);
		jp_east_south.add(jbtn_exit);
		
		jp_east.add("Center",jsp_name);
		jp_east.add("South", jp_east_south);
		
		jp_center.add("Center", jsp_display);
		jp_center.add("South", jtf_msg);
		
		this.add("East", jp_east);
		this.add("Center", jp_center);
		this.setTitle(nickName+"님의 대화창");
		this.setSize(500,500);
		this.setVisible(true);
	}
	public void exitChat() {
		
	}
	public void message_process(String msg) {
		
	}
	
	
	public static void main(String[] args) {
		TalkClient tc = new TalkClient();
	}
	
	//** 이벤트 처리부 **//
	//말하기 인가? 아님 듣기 인가? - !말하기!
	@Override
	public void actionPerformed(ActionEvent e) {
		
	}

}
