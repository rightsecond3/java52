package com.thread;
//편의상 같은 클래스에 선엄함.
class ATM implements Runnable {
	private long depositMoney = 10000;
	//지연, 경합, 순서처리
	@Override
	public void run() {
		for(int i=0; i<10; i++) {//지연처리
			
		}
	}
	//파라미터로 인출할 금액을 받는다.
	//전체 잔고에서 그 금액만큼 차감
	//잔액을 출력
	//스레드 출력
	public void withDraw(long howMuch) {
		//두개의 스레드가 돈을 뽑기 위해 ATM기를 공유하는 상황
		//서로 인터셉트를 하거나 당할 수 있다.
		//먼저 선점한 스레드가 사용중이면 다른 스레드는 진입해서는 안됨.
		if(depositMoney>0) { //잔고가 0보다 크니?
			System.out.println(Thread.currentThread().getName());
			System.out.printf("잔액: %d원 \n", getDepositMoney());
		}
		else { //잔고가 0보다 작거나 요청 금액보다 작을 때
			System.out.println("잔액이 부족합니다.");			
		}
	}
	//** 잔고를 가져오는 메소드 선언 **//
	public long getDepositMoney() {
		return depositMoney;
	}
}
public class SynchronizedEx {

	public static void main(String[] args) {
		ATM atm = new ATM();
		//insert here - 엄마와 아들 스레드 추가하기
		Thread mother = new Thread(atm, "mother");
		mother.start();
		Thread son = new Thread(atm, "son");
		son.start();
	}

}
